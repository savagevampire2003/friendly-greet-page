
import { toast } from '@/hooks/use-toast';

export interface CBCAnalysisRequest {
  image: File;
  patientInfo?: {
    name?: string;
    age?: number;
    gender?: string;
  };
}

export interface CBCParameter {
  name: string;
  value: string;
  unit: string;
  referenceRange: string;
  status: 'normal' | 'high' | 'low';
}

export interface CBCAnalysisResponse {
  analysis: string;
  parameters: CBCParameter[];
  findings: string[];
  recommendations: string[];
  severity: 'normal' | 'mild' | 'moderate' | 'severe';
  confidence: number;
  timestamp: string;
}

export class CBCAnalysisService {
  private static readonly API_BASE_URL = process.env.NODE_ENV === 'production' 
    ? 'http://localhost:8000' 
    : 'http://localhost:8000';

  static async analyzeCBCReport(request: CBCAnalysisRequest): Promise<CBCAnalysisResponse> {
    console.log('Starting CBC analysis...', { fileName: request.image.name, size: request.image.size });
    
    try {
      // First check if backend is accessible
      try {
        const healthCheck = await fetch(`${this.API_BASE_URL}/health`);
        if (!healthCheck.ok) {
          throw new Error('Backend health check failed');
        }
        console.log('Backend health check passed');
      } catch (healthError) {
        console.error('Backend not accessible:', healthError);
        throw new Error('Backend server is not running. Please start the FastAPI server first.');
      }

      const formData = new FormData();
      formData.append('file', request.image);
      
      if (request.patientInfo) {
        formData.append('patient_info', JSON.stringify(request.patientInfo));
      }

      console.log('Sending request to backend...');
      const response = await fetch(`${this.API_BASE_URL}/api/cbc/analyze`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error Response:', errorText);
        throw new Error(`Analysis failed: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      console.log('Analysis successful:', result);
      
      return {
        ...result,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('CBC Analysis Error:', error);
      
      // Show more specific error messages
      if (error instanceof Error) {
        if (error.message.includes('Backend server is not running')) {
          toast({
            title: 'Backend Not Running',
            description: 'Please start the FastAPI server by running "python setup.py" in the backend folder.',
            variant: 'destructive',
          });
        } else if (error.message.includes('Failed to fetch')) {
          toast({
            title: 'Connection Failed',
            description: 'Cannot connect to the analysis server. Make sure it\'s running on http://localhost:8000',
            variant: 'destructive',
          });
        } else {
          toast({
            title: 'Analysis Failed',
            description: error.message || 'Failed to analyze CBC report. Please try again.',
            variant: 'destructive',
          });
        }
      }
      
      throw error;
    }
  }

  static generatePDFReport(result: CBCAnalysisResponse, patientInfo?: any, userInfo?: any): void {
    const reportContent = this.formatReportContent(result, patientInfo, userInfo);
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `CBC_Report_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: 'Report Downloaded',
      description: 'CBC analysis report has been downloaded successfully.',
    });
  }

  private static formatReportContent(result: CBCAnalysisResponse, patientInfo?: any, userInfo?: any): string {
    return `
CBC ANALYSIS REPORT
===================

Date: ${new Date(result.timestamp).toLocaleDateString()}
Time: ${new Date(result.timestamp).toLocaleTimeString()}

USER INFORMATION:
${userInfo?.full_name || userInfo?.email ? `Generated By: ${userInfo.full_name || userInfo.email}` : 'Generated By: Not provided'}
${userInfo?.email ? `Email: ${userInfo.email}` : ''}

PATIENT INFORMATION:
${patientInfo?.name ? `Name: ${patientInfo.name}` : 'Name: Not provided'}
${patientInfo?.age ? `Age: ${patientInfo.age}` : 'Age: Not provided'}
${patientInfo?.gender ? `Gender: ${patientInfo.gender}` : 'Gender: Not provided'}

ANALYSIS SUMMARY:
Severity: ${result.severity.toUpperCase()}
Confidence: ${result.confidence}%

DETAILED ANALYSIS:
${result.analysis}

LABORATORY PARAMETERS:
${result.parameters?.length > 0 ? 
  result.parameters.map(param => 
    `${param.name}: ${param.value} ${param.unit} (Reference: ${param.referenceRange}) - Status: ${param.status.toUpperCase()}`
  ).join('\n') : 'No specific parameters were extracted from the image'}

KEY FINDINGS:
${result.findings.map(finding => `• ${finding}`).join('\n')}

RECOMMENDATIONS:
${result.recommendations.map(rec => `• ${rec}`).join('\n')}

IMPORTANT DISCLAIMER:
This application uses AI to analyze medical images with high accuracy to support clinical decision-making. However, it is not a substitute for professional medical advice, diagnosis, or treatment. Users must consult a licensed physician before taking any clinical action.

Report generated by NashMed AI Analysis System
    `.trim();
  }
}
